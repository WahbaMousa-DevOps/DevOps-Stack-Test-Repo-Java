pipeline {
    agent { label 'java' }

    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPOSITORY = 'wahbamousa/java-sample-app'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        SONAR_PROJECT_KEY = 'java-sample-app'
        APP_VERSION = "${env.BUILD_NUMBER}"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Set Variables') {
            steps {
                script {
                    env.GIT_COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.DOCKER_IMAGE_TAG = "${GIT_COMMIT_HASH}-${BUILD_NUMBER}"
                    env.DOCKER_IMAGE_VERSION = "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:${DOCKER_IMAGE_TAG}"
                    env.DOCKER_IMAGE_LATEST = "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:latest"
                    env.PROJECT_VERSION = sh(script: './gradlew properties -q | grep "version:" | awk \'{print $2}\'', returnStdout: true).trim()
                }
            }
        }

        stage('Build & Test') {
            steps {
                sh './gradlew clean build test -x integrationTest'
            }
        }

        stage('Code Coverage & Reports') {
            steps {
                junit 'build/test-results/test/*.xml'
                jacoco(
                    execPattern: 'build/jacoco/*.exec',
                    classPattern: 'build/classes/java/main',
                    sourcePattern: 'src/main/java',
                    exclusionPattern: '**/*Test*.class'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh './gradlew sonarqube -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml'
                }
            }
        }

        stage('Wait for Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE_VERSION} \
                        --build-arg APP_VERSION=${PROJECT_VERSION} \
                        --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
                        --build-arg GIT_COMMIT=${GIT_COMMIT_HASH} \
                        --no-cache .
                    docker tag ${DOCKER_IMAGE_VERSION} ${DOCKER_IMAGE_LATEST}
                """
            }
        }

        stage('Scan Docker Image') {
            steps {
                sh "trivy image --severity HIGH,CRITICAL ${DOCKER_IMAGE_VERSION}"
            }
        }

        stage('Push Docker Image') {
            when { branch 'main' }
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin ${DOCKER_REGISTRY}
                        docker push ${DOCKER_IMAGE_VERSION}
                        docker push ${DOCKER_IMAGE_LATEST}
                    """
                }
            }
        }

        stage('Deploy (Placeholder)') {
            when { branch 'main' }
            steps {
                echo 'Deploy to dev server or K8s here...'
            }
        }
    }

    post {
        always {
            sh """
                docker rmi ${DOCKER_IMAGE_VERSION} || true
                docker rmi ${DOCKER_IMAGE_LATEST} || true
                docker system prune -f || true
            """
            archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
        }
    }
}
